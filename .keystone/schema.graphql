type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input DonationRelateToManyInput {
  create: [DonationCreateInput]
  connect: [DonationWhereUniqueInput]
  disconnect: [DonationWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  avatar: CloudinaryImage_File
  donations(where: DonationWhereInput, search: String, sortBy: [SortDonationsBy!], orderBy: String, first: Int, skip: Int): [Donation!]!
  _donationsMeta(where: DonationWhereInput, search: String, sortBy: [SortDonationsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  avatar: String
  avatar_not: String
  avatar_in: [String]
  avatar_not_in: [String]

  """ condition must be true for all nodes """
  donations_every: DonationWhereInput

  """ condition must be true for at least 1 node """
  donations_some: DonationWhereInput

  """ condition must be false for all nodes """
  donations_none: DonationWhereInput
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  donations_ASC
  donations_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  avatar: Upload
  donations: DonationRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  avatar: Upload
  donations: DonationRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input FundraiserImageRelateToOneInput {
  create: FundraiserImageCreateInput
  connect: FundraiserImageWhereUniqueInput
  disconnect: FundraiserImageWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Fundraiser {
  id: ID!
  name: String
  description: String
  status: String
  amount: Int
  goal: Int
  dateCreated: String
  photo: FundraiserImage
}

input FundraiserWhereInput {
  AND: [FundraiserWhereInput]
  OR: [FundraiserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
  amount: Int
  amount_not: Int
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int]
  amount_not_in: [Int]
  goal: Int
  goal_not: Int
  goal_lt: Int
  goal_lte: Int
  goal_gt: Int
  goal_gte: Int
  goal_in: [Int]
  goal_not_in: [Int]
  dateCreated: String
  dateCreated_not: String
  dateCreated_lt: String
  dateCreated_lte: String
  dateCreated_gt: String
  dateCreated_gte: String
  dateCreated_in: [String]
  dateCreated_not_in: [String]
  photo: FundraiserImageWhereInput
  photo_is_null: Boolean
}

input FundraiserWhereUniqueInput {
  id: ID!
}

enum SortFundraisersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  amount_ASC
  amount_DESC
  goal_ASC
  goal_DESC
  dateCreated_ASC
  dateCreated_DESC
  photo_ASC
  photo_DESC
}

input FundraiserUpdateInput {
  name: String
  description: String
  status: String
  amount: Int
  goal: Int
  dateCreated: String
  photo: FundraiserImageRelateToOneInput
}

input FundraisersUpdateInput {
  id: ID!
  data: FundraiserUpdateInput
}

input FundraiserCreateInput {
  name: String
  description: String
  status: String
  amount: Int
  goal: Int
  dateCreated: String
  photo: FundraiserImageRelateToOneInput
}

input FundraisersCreateInput {
  data: FundraiserCreateInput
}

input FundraiserRelateToOneInput {
  create: FundraiserCreateInput
  connect: FundraiserWhereUniqueInput
  disconnect: FundraiserWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type FundraiserImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  fundraiser: Fundraiser
}

input FundraiserImageWhereInput {
  AND: [FundraiserImageWhereInput]
  OR: [FundraiserImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  fundraiser: FundraiserWhereInput
  fundraiser_is_null: Boolean
}

input FundraiserImageWhereUniqueInput {
  id: ID!
}

enum SortFundraiserImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  fundraiser_ASC
  fundraiser_DESC
}

input FundraiserImageUpdateInput {
  image: Upload
  altText: String
  fundraiser: FundraiserRelateToOneInput
}

input FundraiserImagesUpdateInput {
  id: ID!
  data: FundraiserImageUpdateInput
}

input FundraiserImageCreateInput {
  image: Upload
  altText: String
  fundraiser: FundraiserRelateToOneInput
}

input FundraiserImagesCreateInput {
  data: FundraiserImageCreateInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Donation {
  id: ID!
  donation: String
  total: Int
  charge: String
  user: User
  name: String
  description: String
  amount: Int
  goal: Int
  dateCreated: String
  photo: FundraiserImage
}

input DonationWhereInput {
  AND: [DonationWhereInput]
  OR: [DonationWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  total: Int
  total_not: Int
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int]
  total_not_in: [Int]
  charge: String
  charge_not: String
  charge_contains: String
  charge_not_contains: String
  charge_starts_with: String
  charge_not_starts_with: String
  charge_ends_with: String
  charge_not_ends_with: String
  charge_i: String
  charge_not_i: String
  charge_contains_i: String
  charge_not_contains_i: String
  charge_starts_with_i: String
  charge_not_starts_with_i: String
  charge_ends_with_i: String
  charge_not_ends_with_i: String
  charge_in: [String]
  charge_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  amount: Int
  amount_not: Int
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int]
  amount_not_in: [Int]
  goal: Int
  goal_not: Int
  goal_lt: Int
  goal_lte: Int
  goal_gt: Int
  goal_gte: Int
  goal_in: [Int]
  goal_not_in: [Int]
  dateCreated: String
  dateCreated_not: String
  dateCreated_lt: String
  dateCreated_lte: String
  dateCreated_gt: String
  dateCreated_gte: String
  dateCreated_in: [String]
  dateCreated_not_in: [String]
  photo: FundraiserImageWhereInput
  photo_is_null: Boolean
}

input DonationWhereUniqueInput {
  id: ID!
}

enum SortDonationsBy {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  charge_ASC
  charge_DESC
  user_ASC
  user_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  amount_ASC
  amount_DESC
  goal_ASC
  goal_DESC
  dateCreated_ASC
  dateCreated_DESC
  photo_ASC
  photo_DESC
}

input DonationUpdateInput {
  total: Int
  charge: String
  user: UserRelateToOneInput
  name: String
  description: String
  amount: Int
  goal: Int
  dateCreated: String
  photo: FundraiserImageRelateToOneInput
}

input DonationsUpdateInput {
  id: ID!
  data: DonationUpdateInput
}

input DonationCreateInput {
  total: Int
  charge: String
  user: UserRelateToOneInput
  name: String
  description: String
  amount: Int
  goal: Int
  dateCreated: String
  photo: FundraiserImageRelateToOneInput
}

input DonationsCreateInput {
  data: DonationCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Fundraiser items which match the where clause. """
  allFundraisers(where: FundraiserWhereInput, search: String, sortBy: [SortFundraisersBy!], orderBy: String, first: Int, skip: Int): [Fundraiser]

  """ Search for the Fundraiser item with the matching ID. """
  Fundraiser(where: FundraiserWhereUniqueInput!): Fundraiser

  """ Perform a meta-query on all Fundraiser items which match the where clause. 
  """
  _allFundraisersMeta(where: FundraiserWhereInput, search: String, sortBy: [SortFundraisersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Fundraiser list. """
  _FundraisersMeta: _ListMeta

  """ Search for all FundraiserImage items which match the where clause. """
  allFundraiserImages(where: FundraiserImageWhereInput, search: String, sortBy: [SortFundraiserImagesBy!], orderBy: String, first: Int, skip: Int): [FundraiserImage]

  """ Search for the FundraiserImage item with the matching ID. """
  FundraiserImage(where: FundraiserImageWhereUniqueInput!): FundraiserImage

  """ Perform a meta-query on all FundraiserImage items which match the where clause. 
  """
  _allFundraiserImagesMeta(where: FundraiserImageWhereInput, search: String, sortBy: [SortFundraiserImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the FundraiserImage list. """
  _FundraiserImagesMeta: _ListMeta

  """ Search for all Donation items which match the where clause. """
  allDonations(where: DonationWhereInput, search: String, sortBy: [SortDonationsBy!], orderBy: String, first: Int, skip: Int): [Donation]

  """ Search for the Donation item with the matching ID. """
  Donation(where: DonationWhereUniqueInput!): Donation

  """ Perform a meta-query on all Donation items which match the where clause. 
  """
  _allDonationsMeta(where: DonationWhereInput, search: String, sortBy: [SortDonationsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Donation list. """
  _DonationsMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Fundraiser item. """
  createFundraiser(data: FundraiserCreateInput): Fundraiser

  """ Create multiple Fundraiser items. """
  createFundraisers(data: [FundraisersCreateInput]): [Fundraiser]

  """ Update a single Fundraiser item by ID. """
  updateFundraiser(id: ID!, data: FundraiserUpdateInput): Fundraiser

  """ Update multiple Fundraiser items by ID. """
  updateFundraisers(data: [FundraisersUpdateInput]): [Fundraiser]

  """ Delete a single Fundraiser item by ID. """
  deleteFundraiser(id: ID!): Fundraiser

  """ Delete multiple Fundraiser items by ID. """
  deleteFundraisers(ids: [ID!]): [Fundraiser]

  """ Create a single FundraiserImage item. """
  createFundraiserImage(data: FundraiserImageCreateInput): FundraiserImage

  """ Create multiple FundraiserImage items. """
  createFundraiserImages(data: [FundraiserImagesCreateInput]): [FundraiserImage]

  """ Update a single FundraiserImage item by ID. """
  updateFundraiserImage(id: ID!, data: FundraiserImageUpdateInput): FundraiserImage

  """ Update multiple FundraiserImage items by ID. """
  updateFundraiserImages(data: [FundraiserImagesUpdateInput]): [FundraiserImage]

  """ Delete a single FundraiserImage item by ID. """
  deleteFundraiserImage(id: ID!): FundraiserImage

  """ Delete multiple FundraiserImage items by ID. """
  deleteFundraiserImages(ids: [ID!]): [FundraiserImage]

  """ Create a single Donation item. """
  createDonation(data: DonationCreateInput): Donation

  """ Create multiple Donation items. """
  createDonations(data: [DonationsCreateInput]): [Donation]

  """ Update a single Donation item by ID. """
  updateDonation(id: ID!, data: DonationUpdateInput): Donation

  """ Update multiple Donation items by ID. """
  updateDonations(data: [DonationsUpdateInput]): [Donation]

  """ Delete a single Donation item by ID. """
  deleteDonation(id: ID!): Donation

  """ Delete multiple Donation items by ID. """
  deleteDonations(ids: [ID!]): [Donation]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
  checkout(token: String!, amount: Int!, fundraiserId: String!): Donation
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
